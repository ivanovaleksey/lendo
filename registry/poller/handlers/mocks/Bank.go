// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ivanovaleksey/lendo/pkg/models"

	uuid "github.com/satori/go.uuid"
)

// Bank is an autogenerated mock type for the Bank type
type Bank struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: ctx, application
func (_m *Bank) CreateApplication(ctx context.Context, application models.Application) (models.ApplicationStatus, error) {
	ret := _m.Called(ctx, application)

	var r0 models.ApplicationStatus
	if rf, ok := ret.Get(0).(func(context.Context, models.Application) models.ApplicationStatus); ok {
		r0 = rf(ctx, application)
	} else {
		r0 = ret.Get(0).(models.ApplicationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Application) error); ok {
		r1 = rf(ctx, application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationStatus provides a mock function with given fields: ctx, id
func (_m *Bank) GetApplicationStatus(ctx context.Context, id uuid.UUID) (models.ApplicationStatus, error) {
	ret := _m.Called(ctx, id)

	var r0 models.ApplicationStatus
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.ApplicationStatus); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.ApplicationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
